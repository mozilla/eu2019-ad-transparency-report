/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./report/report.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "../node_modules/css-loader/index.js!../node_modules/less-loader/dist/cjs.js!./report/report.less":
/*!***********************************************************************************************!*\
  !*** ../node_modules/css-loader!../node_modules/less-loader/dist/cjs.js!./report/report.less ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../../node_modules/css-loader/lib/css-base.js */ "../node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, "/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n/* AUTOGENERATED Photon Colors Less Variables v3.3.2 */\nhtml,\nbody,\ndiv,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\nul,\nol {\n  border: 0;\n  padding: 0;\n  margin: 0;\n}\nhtml {\n  scroll-behavior: smooth;\n}\nbody {\n  width: 880px;\n  margin: 0 auto;\n  padding-top: 2em;\n  padding-bottom: 20em;\n  font-family: \"Open Sans\", sans-serif;\n  font-weight: 300;\n  font-size: 11pt;\n  line-height: 1.35;\n  color: #000;\n}\nbody a {\n  color: #003eaa;\n}\nbody a:visited {\n  color: #003eaa;\n}\nbody a.jump {\n  text-decoration: underline;\n  text-decoration-style: dashed;\n  cursor: pointer;\n}\nbody a,\nbody b {\n  font-weight: 700;\n}\nh1 {\n  font-family: \"Zilla Slab\", sans-serif;\n  font-weight: 700;\n  font-size: 24pt;\n  background: #fff44f;\n  padding: 32px 16px 32px 16px;\n  margin: 0;\n}\ndiv.intro {\n  padding: 16px 0 40px 0;\n}\ndiv.section {\n  padding: 0;\n}\ndiv.section h3 {\n  font-family: \"Zilla Slab\", sans-serif;\n  font-weight: 700;\n  font-size: 16pt;\n  background: #e7e5e2;\n  padding: 16px 16px 16px 16px;\n  margin: 32px 0 0 0;\n}\ndiv.section div.content {\n  padding: 0 0 16px 0;\n}\ndiv.section div.footer {\n  background: #e7e5e2;\n  padding: 16px 16px 16px 16px;\n  margin: 32px 0 0 0;\n  margin-top: 48px;\n  font-family: \"Open Sans\", sans-serif;\n  font-weight: 400;\n  font-size: 9pt;\n  color: #737373;\n  text-align: right;\n}\ndiv.section div.footer a {\n  font-weight: 300;\n}\ndiv.intro h5,\ndiv.section div.content h5 {\n  font-family: \"Zilla Slab\", sans-serif;\n  font-weight: 600;\n  font-size: 14pt;\n  padding: 0 16px 0 16px;\n  margin: 24px 0 0 0;\n}\ndiv.intro h6,\ndiv.section div.content h6 {\n  font-family: \"Zilla Slab\", sans-serif;\n  font-weight: 600;\n  font-size: 12pt;\n  color: #000;\n  padding: 0 16px 0 16px;\n  margin: 16px 0 0 0;\n  margin-left: 60px;\n  border-left: 4px solid #ccc;\n}\ndiv.intro div.p,\ndiv.section div.content div.p {\n  width: 640px;\n  font-family: \"Open Sans\", sans-serif;\n  font-weight: 300;\n  font-size: 11pt;\n  margin: 0;\n  padding: 16px 16px 0 16px;\n}\ndiv.intro div.pp,\ndiv.section div.content div.pp {\n  width: 580px;\n  font-family: \"Open Sans\", sans-serif;\n  font-weight: 300;\n  font-size: 10.5pt;\n  margin: 0;\n  padding: 16px 16px 0 16px;\n  margin-left: 60px;\n  border-left: 4px solid #ccc;\n}\ndiv.intro h5 + div.p,\ndiv.section div.content h5 + div.p {\n  padding: 4px 16px 0 16px;\n}\ndiv.intro h6 + div.pp,\ndiv.section div.content h6 + div.pp {\n  padding: 0 16px 0 16px;\n}\ndiv.intro div.p + h6,\ndiv.section div.content div.p + h6 {\n  margin-top: 20px;\n}\ndiv.intro div.pp + h5,\ndiv.section div.content div.pp + h5 {\n  margin-top: 40px;\n}\ndiv.intro div.p .quote,\ndiv.section div.content div.p .quote,\ndiv.intro div.pp .quote,\ndiv.section div.content div.pp .quote {\n  font-family: \"Fira Mono\", fixed;\n  font-weight: 400;\n  font-size: 9.5pt;\n  padding: 1px 2px 0 2px;\n  border: 1px solid #ccc;\n  background: #eee;\n}\ndiv.intro div.p .verbatim,\ndiv.section div.content div.p .verbatim,\ndiv.intro div.pp .verbatim,\ndiv.section div.content div.pp .verbatim {\n  display: block;\n  font-family: \"Fira Mono\", fixed;\n  font-weight: 400;\n  font-size: 9.5pt;\n  padding: 1px 2px 0 2px;\n  border: 1px solid #ccc;\n  background: #eee;\n  word-wrap: break-word;\n  word-break: break-all;\n}\ndiv.intro div.p i,\ndiv.section div.content div.p i,\ndiv.intro div.pp i,\ndiv.section div.content div.pp i {\n  font-family: \"Open Sans\", sans-serif;\n  font-weight: 400;\n}\ndiv.intro ul,\ndiv.section div.content ul {\n  width: 580px;\n  font-family: \"Open Sans\", sans-serif;\n  font-weight: 300;\n  font-size: 11pt;\n  margin: 0;\n  padding: 16px 16px 0 16px;\n  margin-left: 30px;\n}\ndiv.intro h5.jump {\n  cursor: pointer;\n  border-bottom: 1px solid #e7e5e2;\n  margin: 40px 0 8px 0;\n}\ndiv.intro h5.jump .action {\n  float: right;\n  line-height: 30px;\n  font-family: \"Open Sans\", sans-serif;\n  font-weight: 400;\n  font-size: 9pt;\n  color: #737373;\n}\ndiv.intro h5.jump .action * {\n  pointer-events: none;\n}\ndiv.intro h5.jump:hover .action {\n  color: #003eaa;\n  text-decoration: underline dashed #003eaa;\n}\ndiv.section div.content h5.jump,\ndiv.section div.content h6.jump {\n  cursor: pointer;\n}\ndiv.section div.content h5.jump .action,\ndiv.section div.content h6.jump .action {\n  float: right;\n  line-height: 30px;\n  font-family: \"Open Sans\", sans-serif;\n  font-weight: 400;\n  font-size: 9pt;\n  color: #b1b1b3;\n}\ndiv.section div.content h5.jump .action *,\ndiv.section div.content h6.jump .action * {\n  pointer-events: none;\n}\ndiv.section div.content h5.jump:hover .action,\ndiv.section div.content h6.jump:hover .action {\n  color: #003eaa;\n  text-decoration: underline dashed #003eaa;\n}\ndiv.section.dynamic {\n  cursor: pointer;\n}\ndiv.section.dynamic div.content {\n  height: auto;\n  overflow: hidden;\n}\ndiv.section.dynamic .action {\n  float: right;\n  line-height: 30px;\n  font-family: \"Open Sans\", sans-serif;\n  font-weight: 400;\n  font-size: 9pt;\n  color: #737373;\n  cursor: pointer;\n}\ndiv.section.dynamic .action * {\n  pointer-events: none;\n}\ndiv.section.dynamic:hover .action {\n  color: #003eaa;\n  text-decoration: underline dashed #003eaa;\n}\ndiv.section.dynamic.is_expanded h3 .action.expand {\n  display: none;\n}\ndiv.section.dynamic.is_expanded h3 .action.collapse {\n  display: inline-block;\n}\ndiv.section.dynamic.is_expanded div.content {\n  max-height: 3000px;\n  transition: max-height 0.3s ease-out;\n}\ndiv.section.dynamic.is_collapsed h3 .action.expand {\n  display: inline-block;\n}\ndiv.section.dynamic.is_collapsed h3 .action.collapse {\n  display: none;\n}\ndiv.section.dynamic.is_collapsed div.content {\n  max-height: 0px;\n  transition: max-height 0.3s ease-out;\n}\nbody {\n  width: 1000px;\n}\ndiv.intro h5.fail {\n  color: #a4000f;\n}\ndiv.intro h5 .status_icon {\n  padding-left: 0.25em;\n}\ndiv.intro h5 .status_icon i {\n  font-size: 16px;\n}\ndiv.p select {\n  display: inline-block;\n  font-family: \"Open Sans\", sans-serif;\n  font-weight: 300;\n  font-size: 10pt;\n}\nh5 select {\n  font-family: \"Zilla Slab\", sans-serif;\n  font-weight: 600;\n  font-size: 14pt;\n  padding: 0 0.25em;\n}\ndiv.warnings {\n  padding: 24px 16px 4px 16px;\n}\ndiv.warnings div.warn,\ndiv.warnings div.fail {\n  font-size: 10pt;\n  line-height: 12pt;\n  padding: 0 0 8px 0;\n}\ndiv.warnings div.warn {\n  color: #d7b600;\n}\ndiv.warnings div.fail {\n  color: #a4000f;\n}\ndiv.download {\n  padding: 4px 16px 24px 16px;\n}\ndiv.download a {\n  text-decoration: none;\n}\ndiv.download a:hover {\n  text-decoration: underline;\n  text-decoration-style: dotted;\n}\ndiv.download i {\n  font-size: 10px;\n}\ndiv.download span.download_label {\n  font-family: \"Open Sans\", sans-serif;\n  font-weight: 400;\n  font-size: 9pt;\n}\ndiv.report {\n  padding: 8px 16px 0 16px;\n  font-family: \"Fira Mono\", fixed;\n  font-weight: 400;\n  font-size: 9pt;\n  padding-top: 12px;\n  border-top: 1px solid #333;\n  margin-top: 12px;\n  padding-bottom: 12px;\n  border-bottom: 1px solid #333;\n  margin-bottom: 4px;\n}\ndiv.report b {\n  font-family: \"Fira Mono\", fixed;\n  font-weight: 700;\n}\ndiv.table {\n  padding: 8px 16px 0 16px;\n  font-family: \"Fira Mono\", fixed;\n  font-weight: 400;\n  font-size: 9pt;\n}\ndiv.table div.table_header {\n  padding-bottom: 2px;\n  border-bottom: 1px solid #333;\n  margin-bottom: 2px;\n}\ndiv.table div.table_body {\n  padding-bottom: 2px;\n  border-bottom: 1px solid #333;\n  margin-bottom: 2px;\n}\ndiv.table div.row.header,\ndiv.table div.row.body {\n  padding-left: 2em;\n}\ndiv.table div.row.header:nth-child(5n):not(:last-child),\ndiv.table div.row.body:nth-child(5n):not(:last-child) {\n  padding-bottom: 2px;\n  border-bottom: 1px dotted #ccc;\n  margin-bottom: 2px;\n}\ndiv.table span.cell.header,\ndiv.table span.cell.body {\n  display: inline-block;\n  vertical-align: top;\n  padding-top: 0.3em;\n  padding-bottom: 0.3em;\n  line-height: 1em;\n}\ndiv.table span.cell.header.dimension,\ndiv.table span.cell.body.dimension {\n  width: 22em;\n}\ndiv.table span.cell.header.ad_count,\ndiv.table span.cell.body.ad_count {\n  width: 10em;\n  text-align: right;\n}\ndiv.table span.cell.header.platform,\ndiv.table span.cell.body.platform {\n  width: 1.5em;\n}\ndiv.table span.cell.header.platform i,\ndiv.table span.cell.body.platform i {\n  font-size: 10px;\n  color: #666;\n}\ndiv.table span.cell.header.advertiser,\ndiv.table span.cell.body.advertiser {\n  width: 30.5em;\n}\ndiv.table span.cell.header.advertiser_count,\ndiv.table span.cell.body.advertiser_count {\n  width: 10em;\n  text-align: right;\n}\ndiv.table span.cell.header.impressions,\ndiv.table span.cell.body.impressions {\n  width: 14em;\n  text-align: right;\n}\ndiv.table span.cell.header.spend,\ndiv.table span.cell.body.spend {\n  width: 12em;\n  text-align: right;\n}\n", ""]);

// exports


/***/ }),

/***/ "../node_modules/css-loader/lib/css-base.js":
/*!**************************************************!*\
  !*** ../node_modules/css-loader/lib/css-base.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
module.exports = function (useSourceMap) {
  var list = []; // return the list of modules as css string

  list.toString = function toString() {
    return this.map(function (item) {
      var content = cssWithMappingToString(item, useSourceMap);

      if (item[2]) {
        return "@media " + item[2] + "{" + content + "}";
      } else {
        return content;
      }
    }).join("");
  }; // import a list of modules into the list


  list.i = function (modules, mediaQuery) {
    if (typeof modules === "string") modules = [[null, modules, ""]];
    var alreadyImportedModules = {};

    for (var i = 0; i < this.length; i++) {
      var id = this[i][0];
      if (typeof id === "number") alreadyImportedModules[id] = true;
    }

    for (i = 0; i < modules.length; i++) {
      var item = modules[i]; // skip already imported module
      // this implementation is not 100% perfect for weird media query combinations
      //  when a module is imported multiple times with different media queries.
      //  I hope this will never occur (Hey this way we have smaller bundles)

      if (typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
        if (mediaQuery && !item[2]) {
          item[2] = mediaQuery;
        } else if (mediaQuery) {
          item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
        }

        list.push(item);
      }
    }
  };

  return list;
};

function cssWithMappingToString(item, useSourceMap) {
  var content = item[1] || '';
  var cssMapping = item[3];

  if (!cssMapping) {
    return content;
  }

  if (useSourceMap && typeof btoa === 'function') {
    var sourceMapping = toComment(cssMapping);
    var sourceURLs = cssMapping.sources.map(function (source) {
      return '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */';
    });
    return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
  }

  return [content].join('\n');
} // Adapted from convert-source-map (MIT)


function toComment(sourceMap) {
  // eslint-disable-next-line no-undef
  var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
  var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;
  return '/*# ' + data + ' */';
}

/***/ }),

/***/ "../node_modules/style-loader/lib/addStyles.js":
/*!*****************************************************!*\
  !*** ../node_modules/style-loader/lib/addStyles.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

var stylesInDom = {};

var	memoize = function (fn) {
	var memo;

	return function () {
		if (typeof memo === "undefined") memo = fn.apply(this, arguments);
		return memo;
	};
};

var isOldIE = memoize(function () {
	// Test for IE <= 9 as proposed by Browserhacks
	// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
	// Tests for existence of standard globals is to allow style-loader
	// to operate correctly into non-standard environments
	// @see https://github.com/webpack-contrib/style-loader/issues/177
	return window && document && document.all && !window.atob;
});

var getTarget = function (target, parent) {
  if (parent){
    return parent.querySelector(target);
  }
  return document.querySelector(target);
};

var getElement = (function (fn) {
	var memo = {};

	return function(target, parent) {
                // If passing function in options, then use it for resolve "head" element.
                // Useful for Shadow Root style i.e
                // {
                //   insertInto: function () { return document.querySelector("#foo").shadowRoot }
                // }
                if (typeof target === 'function') {
                        return target();
                }
                if (typeof memo[target] === "undefined") {
			var styleTarget = getTarget.call(this, target, parent);
			// Special case to return head of iframe instead of iframe itself
			if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
				try {
					// This will throw an exception if access to iframe is blocked
					// due to cross-origin restrictions
					styleTarget = styleTarget.contentDocument.head;
				} catch(e) {
					styleTarget = null;
				}
			}
			memo[target] = styleTarget;
		}
		return memo[target]
	};
})();

var singleton = null;
var	singletonCounter = 0;
var	stylesInsertedAtTop = [];

var	fixUrls = __webpack_require__(/*! ./urls */ "../node_modules/style-loader/lib/urls.js");

module.exports = function(list, options) {
	if (typeof DEBUG !== "undefined" && DEBUG) {
		if (typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
	}

	options = options || {};

	options.attrs = typeof options.attrs === "object" ? options.attrs : {};

	// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
	// tags it will allow on a page
	if (!options.singleton && typeof options.singleton !== "boolean") options.singleton = isOldIE();

	// By default, add <style> tags to the <head> element
        if (!options.insertInto) options.insertInto = "head";

	// By default, add <style> tags to the bottom of the target
	if (!options.insertAt) options.insertAt = "bottom";

	var styles = listToStyles(list, options);

	addStylesToDom(styles, options);

	return function update (newList) {
		var mayRemove = [];

		for (var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];

			domStyle.refs--;
			mayRemove.push(domStyle);
		}

		if(newList) {
			var newStyles = listToStyles(newList, options);
			addStylesToDom(newStyles, options);
		}

		for (var i = 0; i < mayRemove.length; i++) {
			var domStyle = mayRemove[i];

			if(domStyle.refs === 0) {
				for (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();

				delete stylesInDom[domStyle.id];
			}
		}
	};
};

function addStylesToDom (styles, options) {
	for (var i = 0; i < styles.length; i++) {
		var item = styles[i];
		var domStyle = stylesInDom[item.id];

		if(domStyle) {
			domStyle.refs++;

			for(var j = 0; j < domStyle.parts.length; j++) {
				domStyle.parts[j](item.parts[j]);
			}

			for(; j < item.parts.length; j++) {
				domStyle.parts.push(addStyle(item.parts[j], options));
			}
		} else {
			var parts = [];

			for(var j = 0; j < item.parts.length; j++) {
				parts.push(addStyle(item.parts[j], options));
			}

			stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
		}
	}
}

function listToStyles (list, options) {
	var styles = [];
	var newStyles = {};

	for (var i = 0; i < list.length; i++) {
		var item = list[i];
		var id = options.base ? item[0] + options.base : item[0];
		var css = item[1];
		var media = item[2];
		var sourceMap = item[3];
		var part = {css: css, media: media, sourceMap: sourceMap};

		if(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});
		else newStyles[id].parts.push(part);
	}

	return styles;
}

function insertStyleElement (options, style) {
	var target = getElement(options.insertInto)

	if (!target) {
		throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");
	}

	var lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];

	if (options.insertAt === "top") {
		if (!lastStyleElementInsertedAtTop) {
			target.insertBefore(style, target.firstChild);
		} else if (lastStyleElementInsertedAtTop.nextSibling) {
			target.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);
		} else {
			target.appendChild(style);
		}
		stylesInsertedAtTop.push(style);
	} else if (options.insertAt === "bottom") {
		target.appendChild(style);
	} else if (typeof options.insertAt === "object" && options.insertAt.before) {
		var nextSibling = getElement(options.insertAt.before, target);
		target.insertBefore(style, nextSibling);
	} else {
		throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");
	}
}

function removeStyleElement (style) {
	if (style.parentNode === null) return false;
	style.parentNode.removeChild(style);

	var idx = stylesInsertedAtTop.indexOf(style);
	if(idx >= 0) {
		stylesInsertedAtTop.splice(idx, 1);
	}
}

function createStyleElement (options) {
	var style = document.createElement("style");

	if(options.attrs.type === undefined) {
		options.attrs.type = "text/css";
	}

	if(options.attrs.nonce === undefined) {
		var nonce = getNonce();
		if (nonce) {
			options.attrs.nonce = nonce;
		}
	}

	addAttrs(style, options.attrs);
	insertStyleElement(options, style);

	return style;
}

function createLinkElement (options) {
	var link = document.createElement("link");

	if(options.attrs.type === undefined) {
		options.attrs.type = "text/css";
	}
	options.attrs.rel = "stylesheet";

	addAttrs(link, options.attrs);
	insertStyleElement(options, link);

	return link;
}

function addAttrs (el, attrs) {
	Object.keys(attrs).forEach(function (key) {
		el.setAttribute(key, attrs[key]);
	});
}

function getNonce() {
	if (false) {}

	return __webpack_require__.nc;
}

function addStyle (obj, options) {
	var style, update, remove, result;

	// If a transform function was defined, run it on the css
	if (options.transform && obj.css) {
	    result = typeof options.transform === 'function'
		 ? options.transform(obj.css) 
		 : options.transform.default(obj.css);

	    if (result) {
	    	// If transform returns a value, use that instead of the original css.
	    	// This allows running runtime transformations on the css.
	    	obj.css = result;
	    } else {
	    	// If the transform function returns a falsy value, don't add this css.
	    	// This allows conditional loading of css
	    	return function() {
	    		// noop
	    	};
	    }
	}

	if (options.singleton) {
		var styleIndex = singletonCounter++;

		style = singleton || (singleton = createStyleElement(options));

		update = applyToSingletonTag.bind(null, style, styleIndex, false);
		remove = applyToSingletonTag.bind(null, style, styleIndex, true);

	} else if (
		obj.sourceMap &&
		typeof URL === "function" &&
		typeof URL.createObjectURL === "function" &&
		typeof URL.revokeObjectURL === "function" &&
		typeof Blob === "function" &&
		typeof btoa === "function"
	) {
		style = createLinkElement(options);
		update = updateLink.bind(null, style, options);
		remove = function () {
			removeStyleElement(style);

			if(style.href) URL.revokeObjectURL(style.href);
		};
	} else {
		style = createStyleElement(options);
		update = applyToTag.bind(null, style);
		remove = function () {
			removeStyleElement(style);
		};
	}

	update(obj);

	return function updateStyle (newObj) {
		if (newObj) {
			if (
				newObj.css === obj.css &&
				newObj.media === obj.media &&
				newObj.sourceMap === obj.sourceMap
			) {
				return;
			}

			update(obj = newObj);
		} else {
			remove();
		}
	};
}

var replaceText = (function () {
	var textStore = [];

	return function (index, replacement) {
		textStore[index] = replacement;

		return textStore.filter(Boolean).join('\n');
	};
})();

function applyToSingletonTag (style, index, remove, obj) {
	var css = remove ? "" : obj.css;

	if (style.styleSheet) {
		style.styleSheet.cssText = replaceText(index, css);
	} else {
		var cssNode = document.createTextNode(css);
		var childNodes = style.childNodes;

		if (childNodes[index]) style.removeChild(childNodes[index]);

		if (childNodes.length) {
			style.insertBefore(cssNode, childNodes[index]);
		} else {
			style.appendChild(cssNode);
		}
	}
}

function applyToTag (style, obj) {
	var css = obj.css;
	var media = obj.media;

	if(media) {
		style.setAttribute("media", media)
	}

	if(style.styleSheet) {
		style.styleSheet.cssText = css;
	} else {
		while(style.firstChild) {
			style.removeChild(style.firstChild);
		}

		style.appendChild(document.createTextNode(css));
	}
}

function updateLink (link, options, obj) {
	var css = obj.css;
	var sourceMap = obj.sourceMap;

	/*
		If convertToAbsoluteUrls isn't defined, but sourcemaps are enabled
		and there is no publicPath defined then lets turn convertToAbsoluteUrls
		on by default.  Otherwise default to the convertToAbsoluteUrls option
		directly
	*/
	var autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;

	if (options.convertToAbsoluteUrls || autoFixUrls) {
		css = fixUrls(css);
	}

	if (sourceMap) {
		// http://stackoverflow.com/a/26603875
		css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
	}

	var blob = new Blob([css], { type: "text/css" });

	var oldSrc = link.href;

	link.href = URL.createObjectURL(blob);

	if(oldSrc) URL.revokeObjectURL(oldSrc);
}


/***/ }),

/***/ "../node_modules/style-loader/lib/urls.js":
/*!************************************************!*\
  !*** ../node_modules/style-loader/lib/urls.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * When source maps are enabled, `style-loader` uses a link element with a data-uri to
 * embed the css on the page. This breaks all relative urls because now they are relative to a
 * bundle instead of the current page.
 *
 * One solution is to only use full urls, but that may be impossible.
 *
 * Instead, this function "fixes" the relative urls to be absolute according to the current page location.
 *
 * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.
 *
 */
module.exports = function (css) {
  // get current location
  var location = typeof window !== "undefined" && window.location;

  if (!location) {
    throw new Error("fixUrls requires window.location");
  } // blank or null?


  if (!css || typeof css !== "string") {
    return css;
  }

  var baseUrl = location.protocol + "//" + location.host;
  var currentDir = baseUrl + location.pathname.replace(/\/[^\/]*$/, "/"); // convert each url(...)

  /*
  This regular expression is just a way to recursively match brackets within
  a string.
  	 /url\s*\(  = Match on the word "url" with any whitespace after it and then a parens
     (  = Start a capturing group
       (?:  = Start a non-capturing group
           [^)(]  = Match anything that isn't a parentheses
           |  = OR
           \(  = Match a start parentheses
               (?:  = Start another non-capturing groups
                   [^)(]+  = Match anything that isn't a parentheses
                   |  = OR
                   \(  = Match a start parentheses
                       [^)(]*  = Match anything that isn't a parentheses
                   \)  = Match a end parentheses
               )  = End Group
               *\) = Match anything and then a close parens
           )  = Close non-capturing group
           *  = Match anything
        )  = Close capturing group
   \)  = Match a close parens
  	 /gi  = Get all matches, not the first.  Be case insensitive.
   */

  var fixedCss = css.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi, function (fullMatch, origUrl) {
    // strip quotes (if they exist)
    var unquotedOrigUrl = origUrl.trim().replace(/^"(.*)"$/, function (o, $1) {
      return $1;
    }).replace(/^'(.*)'$/, function (o, $1) {
      return $1;
    }); // already a full url? no change

    if (/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(unquotedOrigUrl)) {
      return fullMatch;
    } // convert the url to a full url


    var newUrl;

    if (unquotedOrigUrl.indexOf("//") === 0) {
      //TODO: should we add protocol?
      newUrl = unquotedOrigUrl;
    } else if (unquotedOrigUrl.indexOf("/") === 0) {
      // path should be relative to the base url
      newUrl = baseUrl + unquotedOrigUrl; // already starts with '/'
    } else {
      // path should be relative to current directory
      newUrl = currentDir + unquotedOrigUrl.replace(/^\.\//, ""); // Strip leading './'
    } // send back the fixed url(...)


    return "url(" + JSON.stringify(newUrl) + ")";
  }); // send back the fixed css

  return fixedCss;
};

/***/ }),

/***/ "./common/page-ui.js":
/*!***************************!*\
  !*** ./common/page-ui.js ***!
  \***************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3 */ "d3");
/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(d3__WEBPACK_IMPORTED_MODULE_0__);


const PageUI = function () {};

PageUI.prototype.init = function () {
  this._replaceHyberlinkAElements();

  this._replaceHeaderH5Elements();

  this._replaceDynamicSectionDivAndH3Elements();

  this._replaceJumpAElements();

  this._replaceGoToSelectElements();

  this._replaceContactEmail();

  this._initDefaultSection();
}; // Insert target="_blank" and rel="noopener noreferrer" to all external HTML links.


PageUI.prototype._replaceHyberlinkAElements = function () {
  d3__WEBPACK_IMPORTED_MODULE_0__["selectAll"]("a").filter(function () {
    const href = d3__WEBPACK_IMPORTED_MODULE_0__["select"](this).attr("href");
    return href && href.match(/^https?:\/\/.+/);
  }).attr("target", "_blank").attr("rel", "noopener noreferrer");
}; // log.html
// Insert "ok", "warn", or "fail" icon to section -> content -> H5 headers.


PageUI.prototype._replaceHeaderH5Elements = function () {
  const section = d3__WEBPACK_IMPORTED_MODULE_0__["selectAll"]("div.intro, div.section div.content");
  const header = section.selectAll("h5, h6");

  const isOk = function () {
    return d3__WEBPACK_IMPORTED_MODULE_0__["select"](this).classed("ok");
  };

  const isWarn = function () {
    return d3__WEBPACK_IMPORTED_MODULE_0__["select"](this).classed("warn");
  };

  const isFail = function () {
    return d3__WEBPACK_IMPORTED_MODULE_0__["select"](this).classed("fail");
  };

  header.filter(isOk).append("span").attr("class", "status_icon").append("i").attr("class", "fas fa-check-circle");
  header.filter(isWarn).append("span").attr("class", "status_icon").append("i").attr("class", "fas fa-exclamation-triangle");
  header.filter(isFail).append("span").attr("class", "status_icon").append("i").attr("class", "fas fa-times-circle");

  const isJump = function () {
    return d3__WEBPACK_IMPORTED_MODULE_0__["select"](this).classed("jump");
  };

  const isScrollDown = function () {
    return d3__WEBPACK_IMPORTED_MODULE_0__["select"](this).classed("scroll_down");
  };

  const isDetailsBelow = function () {
    return d3__WEBPACK_IMPORTED_MODULE_0__["select"](this).classed("details_below");
  };

  const isDetailsAbove = function () {
    return d3__WEBPACK_IMPORTED_MODULE_0__["select"](this).classed("details_above");
  };

  const jumpToTargetId = elem => {
    const classNames = elem.attr("class").split(" ");

    for (const className of classNames) {
      if (className.substr(0, 8) === "jump_to_") {
        const targetId = className.substr(8);

        this._scrollToElementById(targetId);
      }
    }
  };

  const jumpHeaders = header.filter(isJump);
  jumpHeaders.filter(isScrollDown).append("span").attr("class", "action").text("Scroll down ").append("i").attr("class", "fas fa-angle-double-down");
  jumpHeaders.filter(isDetailsBelow).append("span").attr("class", "action").text("Details ").append("i").attr("class", "fas fa-angle-double-down");
  jumpHeaders.filter(isDetailsAbove).append("span").attr("class", "action").text("Details ").append("i").attr("class", "fas fa-angle-double-up");
  jumpHeaders.on("click", () => {
    d3__WEBPACK_IMPORTED_MODULE_0__["select"](d3__WEBPACK_IMPORTED_MODULE_0__["event"].target).call(jumpToTargetId);
  });
  jumpHeaders.selectAll(".action").on("click", () => {
    d3__WEBPACK_IMPORTED_MODULE_0__["select"](d3__WEBPACK_IMPORTED_MODULE_0__["event"].target.parentNode).call(jumpToTargetId);
  });
}; // Insert "expand" and "collapse" elements to dynamic section -> H3 headers.
// Add UI listeners to dynamic section -> H3 headers.


PageUI.prototype._replaceDynamicSectionDivAndH3Elements = function () {
  const dynamicSection = d3__WEBPACK_IMPORTED_MODULE_0__["selectAll"]("div.section.dynamic"); // Ensure all dynamic sections are marked with either is_expanded or is_collapsed

  const isNotExpanded = function () {
    return !d3__WEBPACK_IMPORTED_MODULE_0__["select"](this).classed("is_expanded");
  };

  dynamicSection.filter(isNotExpanded).classed("is_collapsed", true);
  const elem = dynamicSection.selectAll("h3");
  elem.append("span").attr("class", "action expand").text("Expand ").append("i").attr("class", "fas fa-chevron-down");
  elem.append("span").attr("class", "action collapse").text("Collapse ").append("i").attr("class", "fas fa-chevron-up");
  elem.on("click", () => {
    const sectionElem = d3__WEBPACK_IMPORTED_MODULE_0__["select"](d3__WEBPACK_IMPORTED_MODULE_0__["event"].target.parentNode);

    this._toggleElementByElem(sectionElem);
  });
  elem.selectAll(".action").on("click", () => {
    const sectionElem = d3__WEBPACK_IMPORTED_MODULE_0__["select"](d3__WEBPACK_IMPORTED_MODULE_0__["event"].target.parentNode.parentNode);

    this._toggleElementByElem(sectionElem);
  });
};

PageUI.prototype._replaceJumpAElements = function () {
  const jumpToTargetId = elem => {
    const classNames = elem.attr("class").split(" ");

    for (const className of classNames) {
      if (className.substr(0, 8) === "jump_to_") {
        const targetId = className.substr(8);

        this._scrollToElementById(targetId);
      }
    }
  };

  d3__WEBPACK_IMPORTED_MODULE_0__["selectAll"]("a.jump").on("click", () => {
    d3__WEBPACK_IMPORTED_MODULE_0__["select"](d3__WEBPACK_IMPORTED_MODULE_0__["event"].target).call(jumpToTargetId);
  });
};

PageUI.prototype._replaceGoToSelectElements = function () {
  d3__WEBPACK_IMPORTED_MODULE_0__["selectAll"]("select.select.go_to_report").on("change", () => {
    const value = d3__WEBPACK_IMPORTED_MODULE_0__["event"].target.value;
    const server = window.location.origin;
    const path = window.location.pathname;

    if (path.substr(path.length - 1, 1) !== "/") {
      window.location.href = `${server}${path}/${value}`;
    } else {
      window.location.href = `${server}${path}${value}`;
    }
  });
};

PageUI.prototype._replaceContactEmail = function () {
  d3__WEBPACK_IMPORTED_MODULE_0__["selectAll"](".JAPIXZQN").attr("href", "mailto:adtransparency@mozilla.org?subject=EU Ad Transparency Report");
};

PageUI.prototype._initDefaultSection = function () {
  this._expandDefaultSection();

  this._scrollToDefaultSection();
};

PageUI.prototype._expandDefaultSection = function () {
  if (window.location.hash) {
    this._expandElementById(window.location.hash);
  }
};

PageUI.prototype._scrollToDefaultSection = function () {
  if (window.location.hash) {
    this._scrollToElementById(window.location.hash);
  }
};

PageUI.prototype._expandElementById = function (id) {
  const elem = d3__WEBPACK_IMPORTED_MODULE_0__["select"](id);
  elem.classed("is_expanded", true).classed("is_collapsed", false);
};

PageUI.prototype._toggleElementByElem = function (elem) {
  const isExpanded = elem.classed("is_expanded");
  elem.classed("is_expanded", !isExpanded).classed("is_collapsed", isExpanded);
};

PageUI.prototype._scrollToElementById = function (id) {
  const elem = document.getElementById(id);

  if (elem) {
    elem.scrollIntoView({
      "behavior": "smooth"
    });
    window.location.hash = `#${id}`;
  }
};

/* harmony default export */ __webpack_exports__["default"] = (PageUI);

/***/ }),

/***/ "./report/constants.js":
/*!*****************************!*\
  !*** ./report/constants.js ***!
  \*****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
const crawlDate = "May 13, 2019";
const allDimensions = [{
  "key": "platform",
  "label": "Platform",
  "db_key": "platform_code",
  "db_label": "platform_name"
}, {
  "key": "media",
  "label": "Ad Type",
  "db_key": "media_code",
  "db_label": "media_label"
}, {
  "key": "location",
  "label": "Region",
  "db_key": "location_code",
  "db_label": "location_name"
}, {
  "key": "country",
  "label": "Country",
  "db_key": "country_code",
  "db_label": "country_name"
}, {
  "key": "region",
  "label": "Region",
  "db_key": "region_code",
  "db_label": "region_name"
}, {
  "key": "audience",
  "label": "Gender and Age",
  "db_key": "audience_code",
  "db_label": "audience_label"
}, {
  "key": "gender",
  "label": "Gender",
  "db_key": "gender_code",
  "db_label": "gender_label"
}, {
  "key": "age",
  "label": "Age",
  "db_key": "age_code",
  "db_label": "age_label"
}, {
  "key": "day",
  "label": "Day",
  "db_key": "day_code",
  "db_label": "day_label"
}, {
  "key": "week",
  "label": "Week",
  "db_key": "week_code",
  "db_label": "week_label"
}, {
  "key": "recent",
  "label": "Recent",
  "db_key": "recent_code",
  "db_label": "recent_label"
}, {
  "key": "spend",
  "label": "Spend",
  "db_key": "spend_code",
  "db_label": "spend_label"
}, {
  "key": "impression",
  "label": "Impressions",
  "db_key": "impression_code",
  "db_label": "impression_label"
}];
const euDimensions = allDimensions.filter(d => d.key !== "region");
const countryDimensions = allDimensions.filter(d => d.key !== "country");
const Constants = {
  "crawlDate": crawlDate,
  "dimensions":  false ? undefined : countryDimensions
};
/* harmony default export */ __webpack_exports__["default"] = (Constants);

/***/ }),

/***/ "./report/report.js":
/*!**************************!*\
  !*** ./report/report.js ***!
  \**************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _report_less__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./report.less */ "./report/report.less");
/* harmony import */ var _report_less__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_report_less__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! d3 */ "d3");
/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(d3__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants.js */ "./report/constants.js");
/* harmony import */ var _stats_db_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./stats-db.js */ "./report/stats-db.js");
/* harmony import */ var common_page_ui_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! common/page-ui.js */ "./common/page-ui.js");






const main = function () {
  const getStatsTableColumns = dimension => {
    return [{
      "css": "dimension",
      "db_key": dimension.db_label,
      "is_number": false,
      "label": dimension.label
    }, {
      "css": "advertiser_count",
      "db_key": "advertiser_count",
      "is_number": true,
      "is_exact": true,
      "label": "Advertisers"
    }, {
      "css": "ad_count",
      "db_key": "ad_count",
      "is_number": true,
      "is_exact": true,
      "label": "Ads"
    }, {
      "css": "impressions",
      "db_key": "high_impressions",
      "is_number": true,
      "is_exact": false,
      "label": "Impressions"
    }, {
      "css": "spend",
      "db_key": "high_spend",
      "is_number": true,
      "is_exact": false,
      "label": "Spend (€)"
    }];
  };

  const getAdvertisersTableColumns = () => {
    return [{
      "css": "platform",
      "db_key": "platform_name",
      "is_platform": true,
      "is_number": false,
      "label": ""
    }, {
      "css": "advertiser",
      "db_key": "advertiser_name",
      "is_platform": false,
      "is_number": false,
      "label": "Advertiser"
    }, {
      "css": "ad_count",
      "db_key": "ad_count",
      "is_platform": false,
      "is_number": true,
      "is_exact": true,
      "label": "Ads"
    }, {
      "css": "impressions",
      "db_key": "high_impressions",
      "is_platform": false,
      "is_number": true,
      "is_exact": false,
      "label": "Impressions"
    }, {
      "css": "spend",
      "db_key": "high_spend",
      "is_platform": false,
      "is_number": true,
      "is_exact": false,
      "label": "Spend (€)"
    }];
  };

  const getVisibleDimensionData = (data, dimension) => {
    if (dimension.key === "country") {
      return data.filter(d => d[dimension.db_key] !== "__");
    }

    if (dimension.key === "audience" || dimension.key === "gender") {
      return data.filter(d => d[dimension.db_key].substr(0, 1) !== "u");
    }

    return data;
  };

  const getDefaultDimensionCode = (data, dimension) => {
    if (data.length > 0) {
      return data[0][dimension.db_key];
    } else {
      return null;
    }
  };

  const attachColumnData = columns => {
    return d => {
      return columns.map(column => {
        return Object.assign({}, column, {
          "db_data": d[column.db_key]
        });
      });
    };
  };

  const getCellText = d => {
    return d.is_number ? d.is_exact ? exactNumber(d.db_data) : approxNumber(d.db_data) : d.db_data;
  };

  const numberFormatter = d3__WEBPACK_IMPORTED_MODULE_1__["format"](",");

  const exactNumber = n => {
    return numberFormatter(n);
  };

  const approxNumber = (n, sigfig = 3) => {
    const digits = n === 0 ? 0 : Math.floor(Math.log10(Math.abs(n))) + 1;
    const zeros = Math.pow(10, digits - sigfig);
    const approx = Math.round(Math.floor(n / zeros) * zeros);
    return numberFormatter(approx);
  };

  const renderGlobals = data => {
    d3__WEBPACK_IMPORTED_MODULE_1__["selectAll"](".stats.const.last_updated_date").text(data["last_updated_date"]);
  };

  const renderSummaryStats = data => {
    const stats = data[0];

    for (const key in stats) {
      stats[key] = parseInt(stats[key]);
    }

    d3__WEBPACK_IMPORTED_MODULE_1__["selectAll"](".stats.summary.ad_count").text(exactNumber(stats.ad_count));
    d3__WEBPACK_IMPORTED_MODULE_1__["selectAll"](".stats.summary.advertiser_count").text(exactNumber(stats.advertiser_count));
    d3__WEBPACK_IMPORTED_MODULE_1__["selectAll"](".stats.summary.high_impressions").text(approxNumber(stats.high_impressions));
    d3__WEBPACK_IMPORTED_MODULE_1__["selectAll"](".stats.summary.low_impressions").text(approxNumber(stats.low_impressions));
    d3__WEBPACK_IMPORTED_MODULE_1__["selectAll"](".stats.summary.high_spend").text(approxNumber(stats.high_spend));
    d3__WEBPACK_IMPORTED_MODULE_1__["selectAll"](".stats.summary.low_spend").text(approxNumber(stats.low_spend));
  };

  const renderStatsTable = (data, dimension) => {
    const statsCount = dimension.key === "country" ? 28 : dimension.key === "audience" ? 14 : 20;
    const visibleData = getVisibleDimensionData(data, dimension).slice(0, statsCount);
    const columns = getStatsTableColumns(dimension);
    const rootElem = d3__WEBPACK_IMPORTED_MODULE_1__["select"](`.table.stats.${dimension.key}`);
    rootElem.append("div").attr("class", "table_header").append("div").attr("class", "row header").selectAll("span").data(columns).enter().append("span").attr("class", d => `cell header ${d.css}`).text(d => d.label);
    rootElem.append("div").attr("class", "table_body").selectAll("div").data(visibleData).enter().append("div").attr("class", "row body").selectAll("span").data(attachColumnData(columns)).enter().append("span").attr("class", d => `cell body ${d.css}`).text(getCellText);
  };

  const renderStatsDownloadLink = dimension => {
    const filename = statsDB.getStatsFilename(dimension);
    d3__WEBPACK_IMPORTED_MODULE_1__["selectAll"](`a.csv.stats.${dimension.key}`).attr("href", filename).selectAll("span.download_label").text("Download the full table");
  };

  const renderAdvertisersTable = (data, dimension, advertiserCount = 25) => {
    const visibleData = data.slice(0, advertiserCount);
    const columns = getAdvertisersTableColumns();
    const rootElem = d3__WEBPACK_IMPORTED_MODULE_1__["select"](`.table.advertisers.${dimension.key}`);
    rootElem.selectAll("*").remove();
    rootElem.append("div").attr("class", "table_header").append("div").attr("class", "row header").selectAll("span").data(columns).enter().append("span").attr("class", d => `cell header ${d.css}`).text(d => d.label);
    const cellElems = rootElem.append("div").attr("class", "table_body").selectAll("div").data(visibleData).enter().append("div").attr("class", "row body").selectAll("span").data(attachColumnData(columns)).enter().append("span").attr("class", d => `cell body ${d.css}`);
    cellElems.filter(d => d.is_platform).append("i").attr("class", d => d.db_data === "Facebook" ? "fab fa-facebook-square" : "fab fa-google");
    cellElems.filter(d => !d.is_platform).text(getCellText);
  };

  const renderAdvertisersDownloadLink = (dimension, code) => {
    const filename = statsDB.getAdvertisersFilename(dimension, code);
    d3__WEBPACK_IMPORTED_MODULE_1__["selectAll"](`a.csv.advertisers.${dimension.key}`).attr("href", filename).selectAll("span.download_label").text("Download the full list of advertisers");
  };

  const renderAdvertisersSelectOptions = (data, dimension, defaultCode) => {
    const statsCount = dimension.key === "country" ? 28 : dimension.key === "audience" ? 14 : 20;
    const options = getVisibleDimensionData(data, dimension).slice(0, statsCount).map(d => {
      return {
        "key": d[dimension.db_key],
        "label": d[dimension.db_label]
      };
    });
    const selectElem = d3__WEBPACK_IMPORTED_MODULE_1__["select"](`select.select.${dimension.key}`);
    selectElem.selectAll("option").data(options).enter().append("option").attr("value", d => d.key).attr("selected", d => d.key === defaultCode ? "selected" : null).text(d => d.label);
    selectElem.on("change", function () {
      const code = selectElem.node().value;
      statsDB.loadAdvertisers(dimension, code).then(data => {
        renderAdvertisersTable(data, dimension);
        renderAdvertisersDownloadLink(dimension, code);
      });
    });
  };

  const summary = {
    "key": "summary"
  };
  const statsDB = new _stats_db_js__WEBPACK_IMPORTED_MODULE_3__["default"]("bg");
  const pageUI = new common_page_ui_js__WEBPACK_IMPORTED_MODULE_4__["default"]();
  pageUI.init();
  statsDB.loadGlobals().then(data => {
    renderGlobals(data);
    statsDB.loadStats(summary).then(data => {
      renderSummaryStats(data);
      renderStatsDownloadLink(summary);
      statsDB.loadAdvertisers(summary).then(data => {
        renderAdvertisersTable(data, summary, 50);
        renderAdvertisersDownloadLink(summary);
      });
      _constants_js__WEBPACK_IMPORTED_MODULE_2__["default"].dimensions.forEach(dimension => {
        statsDB.loadStats(dimension).then(data => {
          renderStatsTable(data, dimension);
          renderStatsDownloadLink(dimension);
          const defaultCode = getDefaultDimensionCode(data, dimension);
          renderAdvertisersSelectOptions(data, dimension, defaultCode);
          statsDB.loadAdvertisers(dimension, defaultCode).then(data => {
            renderAdvertisersTable(data, dimension);
            renderAdvertisersDownloadLink(dimension, defaultCode);
          });
        });
      });
    });
  });
};

document.addEventListener("DOMContentLoaded", main);

/***/ }),

/***/ "./report/report.less":
/*!****************************!*\
  !*** ./report/report.less ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


var content = __webpack_require__(/*! !../../node_modules/css-loader!../../node_modules/less-loader/dist/cjs.js!./report.less */ "../node_modules/css-loader/index.js!../node_modules/less-loader/dist/cjs.js!./report/report.less");

if(typeof content === 'string') content = [[module.i, content, '']];

var transform;
var insertInto;



var options = {"hmr":true}

options.transform = transform
options.insertInto = undefined;

var update = __webpack_require__(/*! ../../node_modules/style-loader/lib/addStyles.js */ "../node_modules/style-loader/lib/addStyles.js")(content, options);

if(content.locals) module.exports = content.locals;

if(false) {}

/***/ }),

/***/ "./report/stats-db.js":
/*!****************************!*\
  !*** ./report/stats-db.js ***!
  \****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3 */ "d3");
/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(d3__WEBPACK_IMPORTED_MODULE_0__);


const StatsDB = function (country_code = "eu") {
  this.country_code = country_code;
};

StatsDB.prototype._isSummary = function (dimension) {
  return dimension === undefined || dimension.key === "summary";
};

StatsDB.prototype.getGlobalsFilename = function () {
  if (this.country_code === "eu") {
    return "globals.json";
  } else {
    return "../globals.json";
  }
};

StatsDB.prototype.getStatsFilename = function (dimension) {
  if (this._isSummary(dimension)) {
    return `data/${this.country_code}-stats.csv`;
  } else {
    return `data/${dimension.key}/${this.country_code}-stats-by-${dimension.key}.csv`;
  }
};

StatsDB.prototype.getAdvertisersFilename = function (dimension, code) {
  if (this._isSummary(dimension)) {
    return `data/${this.country_code}-advertisers.csv`;
  } else {
    return `data/${dimension.key}/${this.country_code}-advertisers-by-${dimension.key}-${code}.csv`;
  }
};

StatsDB.prototype.getAdvertisersPreviewFilename = function (dimension, code) {
  if (this._isSummary(dimension)) {
    return `data/${this.country_code}-advertisers+.csv`;
  } else {
    return `data/${dimension.key}/${this.country_code}-advertisers+-by-${dimension.key}-${code}.csv`;
  }
};

StatsDB.prototype.loadGlobals = function () {
  const filename = this.getGlobalsFilename();
  return new Promise((resolve, reject) => {
    d3__WEBPACK_IMPORTED_MODULE_0__["json"](filename).then(data => {
      resolve(data);
    }, () => {
      reject({});
    });
  });
};

StatsDB.prototype.loadStats = function (dimension) {
  const filename = this.getStatsFilename(dimension);
  return new Promise((resolve, reject) => {
    d3__WEBPACK_IMPORTED_MODULE_0__["tsv"](filename).then(data => {
      resolve(data);
    }, () => {
      reject([]);
    });
  });
};

StatsDB.prototype.loadAdvertisers = function (dimension, code) {
  const filename = this.getAdvertisersPreviewFilename(dimension, code);
  return new Promise((resolve, reject) => {
    d3__WEBPACK_IMPORTED_MODULE_0__["tsv"](filename).then(data => {
      resolve(data);
    }, () => {
      reject([]);
    });
  });
};

/* harmony default export */ __webpack_exports__["default"] = (StatsDB);

/***/ }),

/***/ "d3":
/*!*********************!*\
  !*** external "d3" ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = d3;

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,